1)a.
unsigned int Raiz_Quadrada(unsigned int S){
unsigned int x = (s+1)/2, n;
if (s < 2 ) return s;
for (n == 0; n<1000 ; n++ ) {
x = (x + s/ x /2);
}
return x;

b.
Raiz_Quadrada:    cmp #2, R15;
                  jge Raiz_não_trivial;
Raiz_não_trivial: push R5;
                  push R6;
		  mov R15,R5;
	          inc R5;
                  rra R5;
 		  clr R6;
Raiz_loop:        comp #10000, R6;
	          jeq Raiz_end;
	          push R15;
	          mov R5, R14;
                  call #div;
                  add R1, R5;
                  rra R5;
                  pop R15;
                  inc R6;
                  jump Raiz_loop;
Raiz_end:         mov R5, R15;
                  pop R6;
                  pop R5;
                  ret;
		  
2)
a.
int Potencia(int x, int N){
    int pot = x;
    if (N = 0) return 1;
    while (N != 1){
	    pot = pot * x;
        N--;
	}
	return pot;
}

b.
Potencia:             cmp R14, #0;
                      jne Potencia_nao_trivial;
                      mov.w #1, R15; 
                      ret
Potencia_nao_trivial: push R6 ; guarda R6 na pilha
                      mov.w R14, R6 ; r6 = r14 = n
Looping:              cmp R6, #1 ; sai do Loop se n = 1
                      jeq FimLoop;
                      call Mult ; multiplica R15 por x
                      dec.w R6 ; n--
                      jmp Loop;
FimLoop:              pop R6 ; tira R6 da pilha
                      ret;
Mult:                 mov.w R15, R14;
                      mov.w R15, R13;
                      clr.w R15;
loopingMult:          add.w R13, R15;
                      dec.w R14;
                      cmp R14, #0 ; se R14 > 0, fica no loop
                      jl LoopingMult;
FimMult:
                      ret;

3)
CalculaDiv: mov.w #0,R12  ; Valor temporário da divisão
	    mov.w R15,R13 ; R13 é o registrador temporário utilizado nas mini-divisoes.
	    sub.w #0,R13  ; verifica a divisão por zero.
	    jz FimDiv2    ; se dividir por zero, retorna FFFF.
looping:    sub.w R13,R14 ; subtrai o numerador do denominador, para testar.
	    jn FimDiv     ; divisao termina quando a subtração der negativa.
	    inc.w R12     ; caso contrario, incrementa o valor da divisao temporária.
	    jmp looping   ; retorna ao looping
FimDiv:     mov.w R12,R15 ; transmite o valor da divisão para R15
	    ret	    
FimDiv2:    mov.w #FFFFh, R15 ; transmite o valor "INFINITO" para R15
	    ret

4)
CalculaRDiv: mov.w R15,R13 ; R13 é o registrador temporário utilizado nas mini-divisoes.
	     mov.w R15,R11 ; Valor do resto para quando a divisão é por zero.
	     sub.w #0,R13  ; verifica se a divisão é por zero.
	     jz FimDiv     ; se dividir por zero, o resto é o próprio R15.
looping:     mov.w R13,R11 ; resto da divisão será em R11, antes de subtrair o ultimo valor.
	     sub.w R14,R13 ; R13 = R13 - R14 subtrai o numerador do denominador, para testar...
	     jn FimDiv     ; divisao termina quando a subtração der negativa.
	     jmp looping   ; FOR
FimDiv:      mov.w R11,R15 ; transmite o valor do resto da div para R15
             ret  

5)
a.
int Primalidade(unsigned int x){
	    unsigned int y = 0;
	    int i;
            for(i = 1; i <= x; i++){
                if((x%i)== 0){
                    y++;
                }
            }
            if(y == 2)
                return 1;
            else
                return 0;
	}

b.
Primalidade: mov.w #1,R14	; R14 é o valor do índice (i = 1).
	     mov.w #0,R12	; R12 é o registrador que conta as vezes que o resto é zero.
looping:     push.w R15		; Joga o valor de R15 (Número analisado) para a pilha para usar a função #CalculaRST.
             call #CalculaRST
	     inc.w R14		; i++ 
	     cmp #0,R15		; R15, como é resultado da função CalculaRST, indica o resto da divisão de R15/R14. 
	     jne Condition	; if(R15 == 0) -> R12 ++ //indica se o resto é zero.
	     inc.w R12		; R12 ++ ;
Condition:   pop.w R15          ; Resgata o valor de R15, que é o número a ser analisado.
	     cmp.w R14,R15	;  COMP(R14-R15) Quando i > R15, então a análise terminou.
	     jn FIM
	     jmp looping	; FOR 
FIM:         cmp #2,R12         ; if(R12 == 2){ 
	     jeq true		; 	R15 = 1;
	     mov.w #0,R15	; }else{
	     jmp false		;	R15 = 0;
true:	     mov.w #1,R15	;      }
false:	     ret 


6)
unsigned long long DuploFatorial(unsigned long long n);{
	if (n < 2){
	return 1;
	}
	else{
	return n * DuploFatorial(n - 2);
	}
}

7)
a.
double ExpTaylor(double x);{
	int sum = 0;
	int n
	for ( int i = 19; i>0; i--){
		sum+= (x**n/fatorial(n));

	}
	return sum;
	}

*/
unsigned long lond DuploFatorial.c
/*

b.
Exp_taylor:        push.w R15;
                   mov.w #1, R4;
                   mov.w #19, R14;
For_exp_taylor:    Comp #0, R14;
                   jne end_for_exp_taylor;
                   mov.w R4, R15;
                   push.w R14;
                   call Div_Unsigned;
                   mov.w R15, R5;
                   mov.w R14, R6;
                   pop.w R14;
                   pop.w R15;
                   call Mult_Unsigned;
                   add.w #1, R15;
                   dec R14;
                   jmp For_exp_taylor;
end_for_exp_taylor:ret;

8)


9)
                         Clr R12;
                         Clr R11;
For_produto_escalar:     Cmp R13, R12;
		         Jge End_for_produto_escalar;
                         Push R15;
                         Push R14;
                         Add.w R12, R15;
                         Add.w R12, R14;
                         Mov.w 0(R15), R15;
                         Mov.w 0(R14), R14;
                         Call Mult_Signed;
                         Add.w R15, R11;
                         Pop R15;
                         Pop R14;
                         Inc R12;
                         Inc R12;
                         Jmp For_produto_escalar;
End_for_produto_escalar: Mov.w R11, R15;
                         Ret;
